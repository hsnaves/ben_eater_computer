# -*- coding: utf-8 -*-
from  __future__ import absolute_import, division, print_function
import os

def generate_microcode():
    # CPU registers
    # A:   general accumulator register
    # B:   temporary for the ALU
    # PC:  the program counter
    # IR:  instruction register
    # MAR: memory address register
    # OUT: output register
    # F:   flags register
    REG_A_BUS_OE  = 1 << 0   # reg A output to BUS enable
    ALU_BUS_OE    = 1 << 1   # ALU output to BUS enable
    REG_PC_BUS_OE = 1 << 2   # reg PC output to BUS enable
    REG_IR_BUS_OE = 1 << 3   # reg IR output to BUS enable 
    O_RE          = 1 << 4   # RAM read enable
    REG_A_WE      = 1 << 5   # write to reg A enable
    REG_B_WE      = 1 << 6   # write to reg B enable
    REG_PC_WE     = 1 << 7   # write to reg PC enable
    REG_OUT_WE    = 1 << 8   # write to reg OUT enable
    REG_MAR_WE    = 1 << 9   # write to reg MAR enable
    REG_IR_WE     = 1 << 10  # write to reg IR enable
    REG_F_WE      = 1 << 11  # write to reg F enable
    O_WE          = 1 << 12  # RAM write enable
    REG_PC_CE     = 1 << 13  # reg PC counter enable
    ALU_SUB       = 1 << 14  # ALU performs subtraction
    HALT          = 1 << 15  # Halt

    code = [ 0 ] * 512
    for i in range(0, 128, 8):
        for j in range(4):
            code[i * 4 + j] = REG_PC_BUS_OE | REG_MAR_WE

    for i in range(1, 128, 8):
        for j in range(4):
            code[i * 4 + j] = O_RE | REG_IR_WE | REG_PC_CE

    for f in range(4):
        # Code for NOP

        # Code for LDA
        base = 1 * 8
        code[((base + 2) << 2) + f] = REG_IR_BUS_OE | REG_MAR_WE
        code[((base + 3) << 2) + f] = O_RE | REG_A_WE

        # Code for ADD
        base = 2 * 8
        code[((base + 2) << 2) + f] = REG_IR_BUS_OE | REG_MAR_WE
        code[((base + 3) << 2) + f] = O_RE | REG_B_WE
        code[((base + 4) << 2) + f] = ALU_BUS_OE | REG_A_WE | REG_F_WE

        # Code for SUB
        base = 3 * 8
        code[((base + 2) << 2) + f] = REG_IR_BUS_OE | REG_MAR_WE
        code[((base + 3) << 2) + f] = O_RE | REG_B_WE
        code[((base + 4) << 2) + f] = \
            ALU_SUB | ALU_BUS_OE | REG_A_WE | REG_F_WE

        # Code for STA
        base = 4 * 8
        code[((base + 2) << 2) + f] = REG_IR_BUS_OE | REG_MAR_WE
        code[((base + 3) << 2) + f] = O_WE | REG_A_BUS_OE

        # Code for LDI
        base = 5 * 8
        code[((base + 2) << 2) + f] = REG_IR_BUS_OE | REG_A_WE

        # Code for JMP
        base = 6 * 8
        code[((base + 2) << 2) + f] = REG_IR_BUS_OE | REG_PC_WE

        # Code for OUT
        base = 14 * 8
        code[((base + 2) << 2) + f] = REG_A_BUS_OE | REG_OUT_WE

        # Code for HALT
        base = 15 * 8
        code[((base + 2) << 2) + f] = HALT

    # Code for JC
    base = 7 * 8
    code[((base + 2) << 2) + 2] = REG_IR_BUS_OE | REG_PC_WE

    # Code for JZ
    base = 8 * 8
    code[((base + 2) << 2) + 1] = REG_IR_BUS_OE | REG_PC_WE

    return code

def main():
    code = generate_microcode()
    with open("microcode.b", "w") as f:
        f.write("// file automatically generated by %s\n" %\
                os.path.basename(__file__))
        f.write("// DO NOT EDIT IT!\n")
        for i in range(len(code)):
            f.write(format(code[i], 'b').zfill(16))
            f.write("\n")

if __name__ == "__main__":
    main()
